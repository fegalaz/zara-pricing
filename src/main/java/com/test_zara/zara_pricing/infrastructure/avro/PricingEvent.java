/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.test_zara.zara_pricing.infrastructure.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PricingEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1963013160110584486L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PricingEvent\",\"namespace\":\"com.test_zara.zara_pricing.infrastructure.avro\",\"fields\":[{\"name\":\"productId\",\"type\":\"string\",\"doc\":\"ID único del producto\"},{\"name\":\"productName\",\"type\":\"string\",\"doc\":\"Nombre del producto\"},{\"name\":\"oldPrice\",\"type\":[\"null\",\"double\"],\"doc\":\"Precio anterior del producto\"},{\"name\":\"newPrice\",\"type\":\"double\",\"doc\":\"Nuevo precio del producto\"},{\"name\":\"currency\",\"type\":\"string\",\"doc\":\"Moneda del precio\",\"default\":\"EUR\"},{\"name\":\"changeType\",\"type\":{\"type\":\"enum\",\"name\":\"PriceChangeType\",\"symbols\":[\"INCREASE\",\"DECREASE\",\"NEW_PRODUCT\"]},\"doc\":\"Tipo de cambio de precio\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Timestamp del evento en milisegundos\"},{\"name\":\"storeId\",\"type\":[\"null\",\"string\"],\"doc\":\"ID de la tienda (opcional)\"},{\"name\":\"category\",\"type\":[\"null\",\"string\"],\"doc\":\"Categoría del producto\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PricingEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PricingEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PricingEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PricingEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PricingEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PricingEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PricingEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PricingEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PricingEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** ID único del producto */
  private java.lang.CharSequence productId;
  /** Nombre del producto */
  private java.lang.CharSequence productName;
  /** Precio anterior del producto */
  private java.lang.Double oldPrice;
  /** Nuevo precio del producto */
  private double newPrice;
  /** Moneda del precio */
  private java.lang.CharSequence currency;
  /** Tipo de cambio de precio */
  private com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType changeType;
  /** Timestamp del evento en milisegundos */
  private long timestamp;
  /** ID de la tienda (opcional) */
  private java.lang.CharSequence storeId;
  /** Categoría del producto */
  private java.lang.CharSequence category;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PricingEvent() {}

  /**
   * All-args constructor.
   * @param productId ID único del producto
   * @param productName Nombre del producto
   * @param oldPrice Precio anterior del producto
   * @param newPrice Nuevo precio del producto
   * @param currency Moneda del precio
   * @param changeType Tipo de cambio de precio
   * @param timestamp Timestamp del evento en milisegundos
   * @param storeId ID de la tienda (opcional)
   * @param category Categoría del producto
   */
  public PricingEvent(java.lang.CharSequence productId, java.lang.CharSequence productName, java.lang.Double oldPrice, java.lang.Double newPrice, java.lang.CharSequence currency, com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType changeType, java.lang.Long timestamp, java.lang.CharSequence storeId, java.lang.CharSequence category) {
    this.productId = productId;
    this.productName = productName;
    this.oldPrice = oldPrice;
    this.newPrice = newPrice;
    this.currency = currency;
    this.changeType = changeType;
    this.timestamp = timestamp;
    this.storeId = storeId;
    this.category = category;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productId;
    case 1: return productName;
    case 2: return oldPrice;
    case 3: return newPrice;
    case 4: return currency;
    case 5: return changeType;
    case 6: return timestamp;
    case 7: return storeId;
    case 8: return category;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productId = (java.lang.CharSequence)value$; break;
    case 1: productName = (java.lang.CharSequence)value$; break;
    case 2: oldPrice = (java.lang.Double)value$; break;
    case 3: newPrice = (java.lang.Double)value$; break;
    case 4: currency = (java.lang.CharSequence)value$; break;
    case 5: changeType = (com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType)value$; break;
    case 6: timestamp = (java.lang.Long)value$; break;
    case 7: storeId = (java.lang.CharSequence)value$; break;
    case 8: category = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'productId' field.
   * @return ID único del producto
   */
  public java.lang.CharSequence getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * ID único del producto
   * @param value the value to set.
   */
  public void setProductId(java.lang.CharSequence value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'productName' field.
   * @return Nombre del producto
   */
  public java.lang.CharSequence getProductName() {
    return productName;
  }


  /**
   * Sets the value of the 'productName' field.
   * Nombre del producto
   * @param value the value to set.
   */
  public void setProductName(java.lang.CharSequence value) {
    this.productName = value;
  }

  /**
   * Gets the value of the 'oldPrice' field.
   * @return Precio anterior del producto
   */
  public java.lang.Double getOldPrice() {
    return oldPrice;
  }


  /**
   * Sets the value of the 'oldPrice' field.
   * Precio anterior del producto
   * @param value the value to set.
   */
  public void setOldPrice(java.lang.Double value) {
    this.oldPrice = value;
  }

  /**
   * Gets the value of the 'newPrice' field.
   * @return Nuevo precio del producto
   */
  public double getNewPrice() {
    return newPrice;
  }


  /**
   * Sets the value of the 'newPrice' field.
   * Nuevo precio del producto
   * @param value the value to set.
   */
  public void setNewPrice(double value) {
    this.newPrice = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return Moneda del precio
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * Moneda del precio
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'changeType' field.
   * @return Tipo de cambio de precio
   */
  public com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType getChangeType() {
    return changeType;
  }


  /**
   * Sets the value of the 'changeType' field.
   * Tipo de cambio de precio
   * @param value the value to set.
   */
  public void setChangeType(com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType value) {
    this.changeType = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp del evento en milisegundos
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp del evento en milisegundos
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'storeId' field.
   * @return ID de la tienda (opcional)
   */
  public java.lang.CharSequence getStoreId() {
    return storeId;
  }


  /**
   * Sets the value of the 'storeId' field.
   * ID de la tienda (opcional)
   * @param value the value to set.
   */
  public void setStoreId(java.lang.CharSequence value) {
    this.storeId = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return Categoría del producto
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * Categoría del producto
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Creates a new PricingEvent RecordBuilder.
   * @return A new PricingEvent RecordBuilder
   */
  public static com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder newBuilder() {
    return new com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder();
  }

  /**
   * Creates a new PricingEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PricingEvent RecordBuilder
   */
  public static com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder newBuilder(com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder other) {
    if (other == null) {
      return new com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder();
    } else {
      return new com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder(other);
    }
  }

  /**
   * Creates a new PricingEvent RecordBuilder by copying an existing PricingEvent instance.
   * @param other The existing instance to copy.
   * @return A new PricingEvent RecordBuilder
   */
  public static com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder newBuilder(com.test_zara.zara_pricing.infrastructure.avro.PricingEvent other) {
    if (other == null) {
      return new com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder();
    } else {
      return new com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for PricingEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PricingEvent>
    implements org.apache.avro.data.RecordBuilder<PricingEvent> {

    /** ID único del producto */
    private java.lang.CharSequence productId;
    /** Nombre del producto */
    private java.lang.CharSequence productName;
    /** Precio anterior del producto */
    private java.lang.Double oldPrice;
    /** Nuevo precio del producto */
    private double newPrice;
    /** Moneda del precio */
    private java.lang.CharSequence currency;
    /** Tipo de cambio de precio */
    private com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType changeType;
    /** Timestamp del evento en milisegundos */
    private long timestamp;
    /** ID de la tienda (opcional) */
    private java.lang.CharSequence storeId;
    /** Categoría del producto */
    private java.lang.CharSequence category;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.productName)) {
        this.productName = data().deepCopy(fields()[1].schema(), other.productName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.oldPrice)) {
        this.oldPrice = data().deepCopy(fields()[2].schema(), other.oldPrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.newPrice)) {
        this.newPrice = data().deepCopy(fields()[3].schema(), other.newPrice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.changeType)) {
        this.changeType = data().deepCopy(fields()[5].schema(), other.changeType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.storeId)) {
        this.storeId = data().deepCopy(fields()[7].schema(), other.storeId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.category)) {
        this.category = data().deepCopy(fields()[8].schema(), other.category);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing PricingEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.test_zara.zara_pricing.infrastructure.avro.PricingEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productName)) {
        this.productName = data().deepCopy(fields()[1].schema(), other.productName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.oldPrice)) {
        this.oldPrice = data().deepCopy(fields()[2].schema(), other.oldPrice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newPrice)) {
        this.newPrice = data().deepCopy(fields()[3].schema(), other.newPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.changeType)) {
        this.changeType = data().deepCopy(fields()[5].schema(), other.changeType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.storeId)) {
        this.storeId = data().deepCopy(fields()[7].schema(), other.storeId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.category)) {
        this.category = data().deepCopy(fields()[8].schema(), other.category);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'productId' field.
      * ID único del producto
      * @return The value.
      */
    public java.lang.CharSequence getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * ID único del producto
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder setProductId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.productId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * ID único del producto
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'productId' field.
      * ID único del producto
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName' field.
      * Nombre del producto
      * @return The value.
      */
    public java.lang.CharSequence getProductName() {
      return productName;
    }


    /**
      * Sets the value of the 'productName' field.
      * Nombre del producto
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder setProductName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.productName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * Nombre del producto
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productName' field.
      * Nombre del producto
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'oldPrice' field.
      * Precio anterior del producto
      * @return The value.
      */
    public java.lang.Double getOldPrice() {
      return oldPrice;
    }


    /**
      * Sets the value of the 'oldPrice' field.
      * Precio anterior del producto
      * @param value The value of 'oldPrice'.
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder setOldPrice(java.lang.Double value) {
      validate(fields()[2], value);
      this.oldPrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'oldPrice' field has been set.
      * Precio anterior del producto
      * @return True if the 'oldPrice' field has been set, false otherwise.
      */
    public boolean hasOldPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'oldPrice' field.
      * Precio anterior del producto
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder clearOldPrice() {
      oldPrice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'newPrice' field.
      * Nuevo precio del producto
      * @return The value.
      */
    public double getNewPrice() {
      return newPrice;
    }


    /**
      * Sets the value of the 'newPrice' field.
      * Nuevo precio del producto
      * @param value The value of 'newPrice'.
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder setNewPrice(double value) {
      validate(fields()[3], value);
      this.newPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'newPrice' field has been set.
      * Nuevo precio del producto
      * @return True if the 'newPrice' field has been set, false otherwise.
      */
    public boolean hasNewPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'newPrice' field.
      * Nuevo precio del producto
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder clearNewPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * Moneda del precio
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * Moneda del precio
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.currency = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * Moneda del precio
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'currency' field.
      * Moneda del precio
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeType' field.
      * Tipo de cambio de precio
      * @return The value.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType getChangeType() {
      return changeType;
    }


    /**
      * Sets the value of the 'changeType' field.
      * Tipo de cambio de precio
      * @param value The value of 'changeType'.
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder setChangeType(com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType value) {
      validate(fields()[5], value);
      this.changeType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'changeType' field has been set.
      * Tipo de cambio de precio
      * @return True if the 'changeType' field has been set, false otherwise.
      */
    public boolean hasChangeType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'changeType' field.
      * Tipo de cambio de precio
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder clearChangeType() {
      changeType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp del evento en milisegundos
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp del evento en milisegundos
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder setTimestamp(long value) {
      validate(fields()[6], value);
      this.timestamp = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp del evento en milisegundos
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp del evento en milisegundos
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder clearTimestamp() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'storeId' field.
      * ID de la tienda (opcional)
      * @return The value.
      */
    public java.lang.CharSequence getStoreId() {
      return storeId;
    }


    /**
      * Sets the value of the 'storeId' field.
      * ID de la tienda (opcional)
      * @param value The value of 'storeId'.
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder setStoreId(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.storeId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'storeId' field has been set.
      * ID de la tienda (opcional)
      * @return True if the 'storeId' field has been set, false otherwise.
      */
    public boolean hasStoreId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'storeId' field.
      * ID de la tienda (opcional)
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder clearStoreId() {
      storeId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * Categoría del producto
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * Categoría del producto
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.category = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * Categoría del producto
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'category' field.
      * Categoría del producto
      * @return This builder.
      */
    public com.test_zara.zara_pricing.infrastructure.avro.PricingEvent.Builder clearCategory() {
      category = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PricingEvent build() {
      try {
        PricingEvent record = new PricingEvent();
        record.productId = fieldSetFlags()[0] ? this.productId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.productName = fieldSetFlags()[1] ? this.productName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.oldPrice = fieldSetFlags()[2] ? this.oldPrice : (java.lang.Double) defaultValue(fields()[2]);
        record.newPrice = fieldSetFlags()[3] ? this.newPrice : (java.lang.Double) defaultValue(fields()[3]);
        record.currency = fieldSetFlags()[4] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.changeType = fieldSetFlags()[5] ? this.changeType : (com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType) defaultValue(fields()[5]);
        record.timestamp = fieldSetFlags()[6] ? this.timestamp : (java.lang.Long) defaultValue(fields()[6]);
        record.storeId = fieldSetFlags()[7] ? this.storeId : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.category = fieldSetFlags()[8] ? this.category : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PricingEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PricingEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PricingEvent>
    READER$ = (org.apache.avro.io.DatumReader<PricingEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.productId);

    out.writeString(this.productName);

    if (this.oldPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.oldPrice);
    }

    out.writeDouble(this.newPrice);

    out.writeString(this.currency);

    out.writeEnum(this.changeType.ordinal());

    out.writeLong(this.timestamp);

    if (this.storeId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.storeId);
    }

    if (this.category == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.category);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.productId = in.readString(this.productId instanceof Utf8 ? (Utf8)this.productId : null);

      this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8)this.productName : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.oldPrice = null;
      } else {
        this.oldPrice = in.readDouble();
      }

      this.newPrice = in.readDouble();

      this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);

      this.changeType = com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType.values()[in.readEnum()];

      this.timestamp = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.storeId = null;
      } else {
        this.storeId = in.readString(this.storeId instanceof Utf8 ? (Utf8)this.storeId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.category = null;
      } else {
        this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.productId = in.readString(this.productId instanceof Utf8 ? (Utf8)this.productId : null);
          break;

        case 1:
          this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8)this.productName : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.oldPrice = null;
          } else {
            this.oldPrice = in.readDouble();
          }
          break;

        case 3:
          this.newPrice = in.readDouble();
          break;

        case 4:
          this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);
          break;

        case 5:
          this.changeType = com.test_zara.zara_pricing.infrastructure.avro.PriceChangeType.values()[in.readEnum()];
          break;

        case 6:
          this.timestamp = in.readLong();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.storeId = null;
          } else {
            this.storeId = in.readString(this.storeId instanceof Utf8 ? (Utf8)this.storeId : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.category = null;
          } else {
            this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










